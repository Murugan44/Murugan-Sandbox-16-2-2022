@IsTest(SeeAllData=False)
public class MTAStepsController_Test {
    
    public static testMethod void TestMethodMTA() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VFP',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        ps.VG_MTA_Type__c = null;
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id); 
        pse.VG_Type__c = 'Endorsements';
        update pse;
        VG_Policy_Schedule_Endorsement__c pseS=VG_TU.createPolicyScheduleEndorsement(ps.id);
        pseS.VG_Type__c = 'Sub-limits';
        update pseS;
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);
        VG_Payment_Frequency__c pf =VG_TU.createPaymentFrequency(ps.id);
        pf.VG_Debt_Details__c='Bad Debt Recognized';
        update pf;
        
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController mta=new MTAStepsController();
        mta.Cancel();
        mta.gotostep1();
        mta.seletedType = 'Extension';
        mta.gotostep2();
        mta.seletedType = 'Cancellation';
        mta.gotostep2();
        mta.seletedType = 'Reduction';
        mta.gotostep2();
        mta.seletedType = 'Bad Debt Provision';
        mta.gotostep2();
        mta.seletedType = 'Change Broker';
        mta.gotostep2();
        mta.seletedType = 'Revision of Cover';
        mta.gotostep2();
        mta.RecordType = 'VFP';
        mta.seletedType = 'Run-off';
        mta.gotostep2();
        mta.seletedType = null;
        mta.gotostep2();
        mta.ps.VG_MTA_Start_Date__c =Date.newInstance(2020, 12, 19);
        mta.ps.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 20);
        mta.RecordType = 'Aesir';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.RecordType = 'Imara';
        mta.seletedProrateoption = 'Flat';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.RecordType = 'Horizon';
        mta.seletedProrateoption = 'Flat';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.RecordType = 'Affinity';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.RecordType = 'VCL';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.RecordType = 'SAPI';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = 'Bad Debt Provision';
        mta.gotoStep4();
        mta.RecordType = 'VFP';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = 'Bad Debt Provision';
        mta.gotoStep4();
        mta.seletedType = 'null';
        mta.ps.Product__c = 'D&O';
        mta.gotoStep4();
        mta.seletedType = 'null';
        mta.ps.Product__c = 'PI';
        mta.gotoStep4();
        mta.RecordType = 'GentiumScheme';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.RecordType = 'GentiumFleet';
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.RecordType = 'Bridge';
        mta.seletedType = 'Revision of Cover';
        mta.seletedProrateoption = 'Flat';
        mta.ps.Product__c = 'PI';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.ps.Product__c = 'Commercial Combined';
        mta.gotoStep4();
        mta.seletedType = null;
        mta.gotoStep4();
        mta.seletedType = 'Revision of Cover';
        mta.seletedProrateoption = '';
        mta.gotoStep4();
        mta.gotoStep4();
        mta.ps.VG_MTA_Start_Date__c = null;
        mta.gotoStep4();
        mta.gotoStep4();
        mta.ps.VG_MTA_Start_Date__c = Date.newInstance(2021, 5, 18);
        mta.gotoStep4();
        mta.gotoStep4();
        mta.ps.Policy__r.VG_Inception_Date__c = Date.newInstance(2021, 12, 18);
        mta.gotoStep4();
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        psw.ps = ps;
        psw.ps.VG_Is_MTA__c = false;
        psw.ps.VG_MTA_Type__c = 'Revision of Cover';
        psw.ps.Product__c = 'D&O Run-off';
        mta.PSWrapperMap.put(psw.ps.id, psw);
        
        mta.seletedType = 'Extension';
        mta.UpdateAdjustmentvalues();
        mta.seletedProrateoption = 'Flat';
        mta.seletedType = 'Cancellation';
        mta.UpdateAdjustmentvalues();
        mta.seletedProrateoption = 'Prorated';
        mta.IsProRated = false;
        mta.UpdateAdjustmentvalues();
        
        /*mta.MTAcancellationDate = Date.newInstance(2021, 12, 10);*/
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.UpdateAdjustmentvalues();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.UpdateAdjustmentvalues();
        
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', null);
        MTAStepsController mta1=new MTAStepsController();
        mta1.Cancel();
        mta1.seletedType = '--Select--';
        mta1.gotostep2();
        mta1.ps.VG_MTA_End_Date__c=null;
        mta1.gotoStep4();
        
        ApexPages.currentPage().getParameters().put('PSID', null);
        ApexPages.currentPage().getParameters().put('PID', null);
        MTAStepsController mta2=new MTAStepsController();
        mta2.Cancel();
        mta2.product = '--None--';
        mta2.gotostep2();
        mta2.ps.VG_MTA_Start_Date__c = null;
        mta2.gotoStep4();
        MTAStepsController.PSWrapper psw1 = new MTAStepsController.PSWrapper();
        psw1.ps = ps;
        psw1.ps.VG_Is_MTA__c = true;
        psw1.ps.VG_MTA_Type__c = 'Revision of Cover';
        mta2.PSWrapperMap.put(psw1.ps.id, psw1);
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.UpdateAdjustmentvalues();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.UpdateAdjustmentvalues();
        
    }
    
    public static testMethod void TestMethodROCAesir() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Aesir',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id); 
        pse.VG_Type__c = 'Endorsements';
        update pse;
        VG_Policy_Schedule_Endorsement__c pseS=VG_TU.createPolicyScheduleEndorsement(ps.id);
        pseS.VG_Type__c = 'Sub-limits';
        update pseS;
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);
        VG_Payment_Frequency__c pf =VG_TU.createPaymentFrequency(ps.id);
        pf.VG_Debt_Details__c='Bad Debt Recognized';
        update pf;
        
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController mta=new MTAStepsController();
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        psw.ps = ps;
        psw.ps.VG_Is_MTA__c = true;
        mta.PSWrapperMap.put(psw.ps.id, psw);
        mta.calcJunction();
        
    }   
    
    public static testMethod void TestMethodROCImara() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Imara',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        ps.VG_MTA_Start_Date__c = Date.newInstance(2021, 12, 10);
        ps.VG_MTA_End_Date__c = Date.newInstance(2021, 12, 20);
        update ps;
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        MTAStepsController.PSWrapper psww = new MTAStepsController.PSWrapper();
        psww.ps = ps1;
        psww.ps.VG_Is_MTA__c = true;
        psww.ps.VG_MTA_Type__c = 'Revision of Cover';
        MTAStepsController.PSWrapper pswa = new MTAStepsController.PSWrapper();
        pswa.ps = ps;
        pswa.ps.VG_Is_MTA__c = false;
        pswa.ps.VG_MTA_Type__c = 'Revision of Cover';
        mta.PSWrapperMap.put(pswa.ps.id, pswa);
        mta.PSWrapperMap.put(psww.ps.id, psww);
        mta.seletedType = 'Extension';
        mta.seletedProrateoption = 'Flat';
        mta.calcJunction();
        mta.ps.VG_MTA_End_Date__c = null;
        mta.seletedType = 'Extension';
        mta.calcJunction();
        mta.seletedProrateoption = 'Flat';
        mta.seletedType = 'Cancellation';
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.IsProRated = false;
        mta.calcJunction();
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction();
    } 
    
    public static testMethod void TestMethodROCAffinity() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Affinity',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        MTAStepsController.PSWrapper psww = new MTAStepsController.PSWrapper();
        psww.ps = ps;
        psww.ps.VG_Is_MTA__c = true;
        psww.ps.VG_MTA_Type__c = 'Revision of Cover';
        MTAStepsController.PSWrapper pswh = new MTAStepsController.PSWrapper();
        pswh.ps = ps1;
        pswh.ps.VG_Is_MTA__c = false;
        pswh.ps.VG_MTA_Type__c = 'Revision of Cover';
        pswh.ps.Product__c = 'Schemes';
        mta.PSWrapperMap.put(pswh.ps.id, pswh);
        mta.PSWrapperMap.put(psww.ps.id, psww);
        mta.seletedType = 'Extension';
        mta.calcJunction();
        mta.seletedProrateoption = 'Flat';
        mta.seletedType = 'Cancellation';
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.IsProRated = false;
        mta.calcJunction();
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction();   
        
        mta.IsReduction = true;
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 10);
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 20);
        mta.finish();
        mta.IsReduction = true;
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 10);
        mta.ps.VG_MTA_Reduction_Date__c = null;
        mta.finish();
        mta.IsReduction = true;
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 10);
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 10);
        mta.IsExtension = true;
        mta.ps.VG_MTA_End_Date__c = null;
        mta.finish();
        
    }  
    
    
    public static testMethod void TestMethodROCGentium() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VIM',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
         ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        MTAStepsController.PSWrapper psww = new MTAStepsController.PSWrapper();
        psww.ps = ps1;
        psww.ps.VG_Is_MTA__c = true;
        psww.ps.VG_MTA_Type__c = 'Revision of Cover';
        MTAStepsController.PSWrapper pswh = new MTAStepsController.PSWrapper();
        pswh.ps = ps;
        pswh.ps.VG_Is_MTA__c = false;
        pswh.ps.VG_MTA_Type__c = 'Revision of Cover';
        mta.PSWrapperMap.put(pswh.ps.id, pswh);
        mta.PSWrapperMap.put(psww.ps.id, psww);
        mta.seletedType = 'Extension';
        mta.calcJunction();
        mta.seletedProrateoption = 'Flat';
        mta.seletedType = 'Cancellation';
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.IsProRated = false;
        mta.calcJunction();
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction(); 
        
        mta.IsCancellation = true;
        mta.ps.MTA_Reason_for_Cancellation__c = 'Not Known';
        mta.ps.VG_Pre_MTA_Expiry_Date__c =Date.newInstance(2021, 12, 18);
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 19);
        mta.finish();
    } 
    
    public static testMethod void TestMethodROCVCL() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VCL',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);   
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id); 
        pse.VG_Type__c = 'Endorsements';
        update pse;
        VG_Policy_Schedule_Endorsement__c pseS=VG_TU.createPolicyScheduleEndorsement(ps.id);
        pseS.VG_Type__c = 'Sub-limits';
        update pseS;
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);
        
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep2();
        MTAStepsController.PSWrapper psww = new MTAStepsController.PSWrapper();
        psww.ps = ps1;
        psww.ps.VG_Is_MTA__c = true;
        psww.ps.VG_MTA_Type__c = 'Revision of Cover';
        psww.wrappsaList.add(rr);
        psww.wrappseList.add(pse);
        psww.wrapsbpseList.add(pseS);
        psww.wraprcList.add(rc);
        MTAStepsController.PSWrapper pswh = new MTAStepsController.PSWrapper();
        pswh.ps = ps;
        pswh.ps.VG_Is_MTA__c = false;
        pswh.ps.VG_MTA_Type__c = 'Revision of Cover';
        mta.PSWrapperMap.put(pswh.ps.id, pswh);
        mta.PSWrapperMap.put(psww.ps.id, psww);
        mta.seletedType = 'Extension';
        mta.calcJunction();
        mta.seletedProrateoption = 'Flat';
        mta.seletedType = 'Cancellation';
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.IsProRated = false;
        mta.calcJunction();
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.calcJunction(); 
        
        mta.IsReduction = true;
        mta.finish();
        mta.IsCancellation = true;
        mta.ps.MTA_Reason_for_Cancellation__c = '--None--';
        mta.finish();
    } 
    
    public static testMethod void TestMethodROCSAPI() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('SAPI',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        ps.VG_MTA_Start_Date__c = Date.newInstance(2021, 12, 10);
        ps.VG_MTA_End_Date__c = Date.newInstance(2021, 12, 20);
        update ps;
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
         ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PID', pol.id);
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep2();
        MTAStepsController.PSWrapper psww = new MTAStepsController.PSWrapper();
        psww.ps = ps1;
        psww.ps.VG_Is_MTA__c = true;
        psww.ps.VG_MTA_Type__c = 'Revision of Cover';
        MTAStepsController.PSWrapper pswh = new MTAStepsController.PSWrapper();
        pswh.ps = ps;
        pswh.ps.VG_Is_MTA__c = false;
        pswh.ps.VG_MTA_Type__c = 'Revision of Cover';
        mta.PSWrapperMap.put(pswh.ps.id, pswh);
        mta.PSWrapperMap.put(psww.ps.id, psww);
        mta.seletedType = 'Extension';
        mta.SAPISummaryCalc();
        mta.ps.VG_MTA_End_Date__c = null;
        mta.seletedType = 'Extension';
        mta.SAPISummaryCalc();
        mta.seletedProrateoption = 'Flat';
        mta.seletedType = 'Cancellation';
        mta.SAPISummaryCalc();
        mta.seletedProrateoption = 'Prorated';
        mta.IsProRated = false;
        mta.SAPISummaryCalc();
        mta.ps.VG_Pre_MTA_Expiry_Date__c = Date.newInstance(2021, 12, 20);
        mta.seletedType = 'Cancellation';
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 18);
        mta.SAPISummaryCalc();
        mta.seletedType = 'Reduction';
        mta.ps.VG_MTA_Reduction_Date__c = Date.newInstance(2021, 12, 18);
        mta.SAPISummaryCalc();   
        
        mta.ps.VG_MTA_Start_Date__c = Date.newInstance(2021, 12, 10);
        mta.ps.VG_MTA_End_Date__c = Date.newInstance(2021, 12, 20);
        mta.IsExtension = true;
        mta.finish();
        mta.IsCancellation = true;
        mta.ps.MTA_Reason_for_Cancellation__c = 'Not known';
        mta.finish();
        mta.ps.VG_MTA_Start_Date__c = Date.newInstance(2021, 12, 21);
        mta.ps.VG_MTA_End_Date__c = Date.newInstance(2021, 12, 20);
        mta.IsExtension = true;
        mta.ps.VG_MTA_Cancellation_Date__c = Date.newInstance(2021, 12, 10);
        mta.policy.VG_Inception_Date__c = Date.newInstance(2021, 12, 20);
        mta.finish();
        mta.ps.VG_MTA_Start_Date__c = Date.newInstance(2021, 12, 21);
        mta.ps.VG_MTA_End_Date__c = Date.newInstance(2021, 12, 20);
        mta.IsExtension = true;
        mta.ps.VG_MTA_Cancellation_Date__c = null;
        mta.policy.VG_Inception_Date__c = Date.newInstance(2021, 12, 20);
        mta.finish();
    } 
    

    /*public static testMethod void TestMethodROCVFP() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VFP',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        Endorsement_Library__c EL1=VG_TU.createEndorsementLibraryCustom('VFP','Sub-limits');        
        Endorsement_Library__c EL2=VG_TU.createEndorsementLibraryCustom('VFP','Endorsements');       
        Endorsement_Library__c EL=VG_TU.createEndorsementLibrary();
        EL.RecordTypeId=Schema.SObjectType.Endorsement_Library__c.getRecordTypeInfosByName().get('VFP').getRecordTypeId();
        EL.VG_Product__c='Property';        
        update EL;
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'VFP');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of Cover'; 
        mta.RecordType = 'VFP';
        mta.seletedProrateoption = 'Flat';
        mta.gotostep2();
        mta.seletedProrateoption = 'Prorated';
        mta.gotoStep4();   
        
    }   
    
    public static testMethod void TestMethodROCAesir() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Aesir',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'Aesir');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of Cover'; 
        mta.gotoStep4();           
    }   
    
    public static testMethod void TestMethodROCImara() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Imara',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'Imara');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of Cover'; 
        mta.gotoStep4();
    }  
    
    public static testMethod void TestMethodROCHorizon() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Horizon',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'Horizon');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of Cover'; 
        mta.gotoStep4();          
    }  
    
    public static testMethod void TestMethodROCAffinity() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Affinity',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'Affinity');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of Cover'; 
        mta.gotoStep4();          
    } 
    
    public static testMethod void TestMethodROCGentium() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VIM',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'GentiumScheme');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of Cover'; 
        mta.gotoStep4();          
    } 
    
    public static testMethod void TestMethodVFP1() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');  
        Policy__c pol=VG_TU.createPolicy('VFP',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2019, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 12, 18);
        update pol;
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id); 
        ps.VG_MTA_Type__c ='Revision of Cover';
        ps.VG_Is_MTA__c = true;
        ps.Technical_UW_Premium__c=7000;
        Ps.Premium_Adjustment__c=5000;
        ps.VG_Fee_Income__c=500;  
        ps.VG_MTA_Reduction_Date__c =Date.newInstance(2020, 5, 18);
        ps.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2019, 12, 19);
        ps.VG_MTA_Start_Date__c =Date.newInstance(2019, 12, 19);
        ps.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);     
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);   
        Test.startTest();
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        MTAStepsController mta=new MTAStepsController();        
        mta.gotostep1();
        mta.gotostep2();
        mta.seletedType  =  '--Select--';
        mta.gotostep2();
        mta.seletedType='Extension';
        mta.seletedProrateoption = 'Flat';
        mta.UpdateAdjustmentvalues();
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.UpdateAdjustmentvalues();
        mta.calcJunction();
        mta.finish();  
        pol.VG_Expiry_Date__c = ps.VG_MTA_End_Date__c;
        update pol;  
        mta.Cancel();
        Utilities.clearMethods();
        Test.stopTest();
    }*/

    /*public static testMethod void TestMethodVFP2() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VFP',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2017, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 12, 18);
        update pol;
        
        Test.startTest();        
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>(); 
        Policy_Schedule__c ps0=VG_TU.createPolicySchedule(pol.id);
        ps0.VG_MTA_Cancellation_Date__c=Date.newInstance(2018, 2, 1);
        ps0.VG_MTA_Reduction_Date__c =Date.newInstance(2018, 2, 1);
        ps0.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);        
        ps0.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps0.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 18);
        update ps0;
        Policy_Schedule__c ps=ps0.clone(false,true,false,false);
        ps.Technical_UW_Premium__c=7000;
        ps.VG_Is_MTA__c = false;
        pslist.add(ps);               
        Policy_Schedule__c ps1=ps.clone(false,true,false,false);
        ps1.VG_Is_MTA__c=True;
        ps1.VG_MTA_Type__c = 'Revision of Cover';
        ps1.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps1.VG_MTA_Start_Date__c=Date.newInstance(2018, 10, 18);
        pslist.add(ps1);
        Policy_Schedule__c ps2=ps.clone(false,true,false,false);
        ps2.VG_Is_MTA__c=True;
        ps2.VG_MTA_Type__c = 'Extension';
        ps2.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps2.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps2);
        Policy_Schedule__c ps3=ps1.clone(false,true,false,false); 
        ps3.VG_Is_MTA__c=True;
        ps3.VG_MTA_Type__c = 'Extension';
        ps3.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps3.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps3);
        Insert pslist;        
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        rr.VG_Sum_Insured__c = 4870;
        update rr;
        VG_Policy_Schedule_Asset__c rr1=VG_TU.createPolicyScheduleAsset(ps1.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        VG_Policy_Schedule_Endorsement__c pse2=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        pse2.VG_Type__c = 'Sub-limits';
        update pse2;
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);
        rc.VG_Company_Type__c='Public';
        rc.VG_Company_Domicile__c='UK';
        rc.VG_Industry__c='Energy';
        rc.VG_Total_Assets__c=500000;
        rc.VG_Revenue__c   =50000;
        rc.VG_Market_Cap__c=50000;
        rc.VG_Net_Profit__c=50000;
        rc.VG_Net_Equity__c=50000;
        rc.VG_Headcount__c=2;
        rc.VG_Class_1_Employees__c=2;
        rc.VG_No_of_Reinstatements__c = String.valueOf(2);
        update rc;
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        ApexPages.currentPage().getParameters().put('PSID', ps0.id);        
        MTAStepsController mta=new MTAStepsController();             
        mta.gotostep1();
        mta.seletedType='Reduction'; 
        mta.gotostep2();
        mta.MTAcancellationDate = ps0.VG_MTA_Reduction_Date__c;
        mta.UpdateAdjustmentvalues();                
        mta.calcJunction();
        mta.gotoStep4();        
        mta.finish();  
        mta.Cancel();
        MTAStepsController mta1=new MTAStepsController();             
        mta1.gotostep1();
        mta1.seletedType='Cancellation';   
        mta1.gotostep2();
        mta1.MTAcancellationDate = ps0.VG_MTA_Cancellation_Date__c;
        mta1.UpdateAdjustmentvalues();                
        mta1.calcJunction();
        mta1.gotoStep4();        
        mta1.finish();
        Test.stopTest(); 
        
    }*/
    
   /*public static testMethod void TestMethodVFP3() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');
        Utilities.SkipMethods('Trigger Context');
        Utilities.SkipMethods('Trigger Context2');
        Utilities.SkipMethods('FIDO_ROC_Revise_Context');
        Policy__c pol=VG_TU.createPolicy('VFP',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2017, 12, 18);
        pol.VG_Expiry_Date__c =Date.newInstance(2019, 1, 18);
        update pol;                
		Test.startTest();        
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>(); 
        Policy_Schedule__c ps0=VG_TU.createPolicySchedule(pol.id); 
        ps0.VG_MTA_Cancellation_Date__c=Date.newInstance(2018, 12, 19);
        ps0.VG_MTA_Reduction_Date__c =Date.newInstance(2018, 2, 1);
        ps0.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);        
        ps0.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps0.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 18);
        update ps0;
        Policy_Schedule__c ps=ps0.clone(false,true,false,false);
        ps.Technical_UW_Premium__c=7000;
        ps.VG_Is_MTA__c = false;
        pslist.add(ps);               
        Policy_Schedule__c ps1=ps.clone(false,true,false,false);
        ps1.VG_Is_MTA__c=True;
        ps1.VG_MTA_Type__c = 'Revision of Cover';
        ps1.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps1.VG_MTA_Start_Date__c=Date.newInstance(2018, 10, 18);
        pslist.add(ps1);
        Policy_Schedule__c ps2=ps.clone(false,true,false,false);
        ps2.VG_Is_MTA__c=True;
        ps2.VG_MTA_Type__c = 'Extension';
        ps2.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps2.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps2);
        Policy_Schedule__c ps3=ps1.clone(false,true,false,false);
        ps3.VG_Is_MTA__c=True;
        ps3.VG_MTA_Type__c = 'Extension';
        ps3.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps3.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps3);
        Insert pslist;        
        VG_Policy_Schedule_Asset__c rr1=VG_TU.createPolicyScheduleAsset(ps1.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);
        rc.VG_Company_Type__c='Public';
        rc.VG_Company_Domicile__c='UK';
        rc.VG_Industry__c='Energy';
        rc.VG_Total_Assets__c=500000;
        rc.VG_Revenue__c   =50000;
        rc.VG_Market_Cap__c=50000;
        rc.VG_Net_Profit__c=50000;
        rc.VG_Net_Equity__c=50000;
        rc.VG_Headcount__c=2;
        rc.VG_Class_1_Employees__c=2;
        rc.VG_No_of_Reinstatements__c = String.valueOf(2);
        update rc;
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        ApexPages.currentPage().getParameters().put('PSID', ps0.id);        
        MTAStepsController mta=new MTAStepsController();             
        mta.gotostep1();
        mta.seletedType='Reduction';   
        mta.gotostep2();
        mta.MTAcancellationDate = ps0.VG_MTA_Reduction_Date__c;
        mta.calcJunction();
        mta.UpdateAdjustmentvalues();        
        mta.gotoStep4();        
        mta.finish();  
        mta.Cancel();
        MTAStepsController mta1=new MTAStepsController();             
        mta1.gotostep1();
        mta1.seletedType='Cancellation';   
        mta1.gotostep2();
        mta1.MTAcancellationDate = ps0.VG_MTA_Cancellation_Date__c;
        mta1.UpdateAdjustmentvalues();                
        mta1.calcJunction();
        mta1.gotoStep4();        
        mta1.finish();
        Utilities.clearMethods();
        Test.stopTest(); 
        
    }
    
    
    public static testMethod void TestMethodImara1() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Trigger Context2');
        Policy__c pol=VG_TU.createPolicy('Imara',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2019, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 12, 18);
        update pol;
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id); 
        ps.VG_MTA_Type__c ='Revision of Cover';
        ps.VG_Is_MTA__c = true;
        ps.Technical_UW_Premium__c=7000;
        Ps.Premium_Adjustment__c=5000;
        ps.VG_Fee_Income__c=500;  
        ps.VG_MTA_Reduction_Date__c =Date.newInstance(2020, 5, 18);
        ps.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2019, 12, 19);
        ps.VG_MTA_Start_Date__c =Date.newInstance(2019, 12, 19);
        ps.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);     
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);   
        Test.startTest();
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        MTAStepsController mta=new MTAStepsController();        
        mta.gotostep1();
        mta.gotostep2();
        mta.seletedType='Reduction';
        mta.gotostep2();
        mta.seletedType='Extension';
        mta.seletedProrateoption = 'Flat';
        mta.UpdateAdjustmentvalues();
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.calcJunction();
        mta.finish();  
        pol.VG_Expiry_Date__c = ps.VG_MTA_End_Date__c;
        update pol;  
        mta.Cancel();
        Utilities.clearMethods();
        Test.stopTest();
    }

    public static testMethod void TestMethodImara2() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');  
        Policy__c pol=VG_TU.createPolicy('Imara',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2019, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 12, 18);
        update pol;        
        Test.startTest();       
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>(); 
        Policy_Schedule__c ps0=VG_TU.createPolicySchedule(pol.id); 
        ps0.VG_MTA_Cancellation_Date__c=Date.newInstance(2018, 2, 1);
        ps0.VG_MTA_Reduction_Date__c =Date.newInstance(2018, 2, 1);
        ps0.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);        
        ps0.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps0.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 18);
        update ps0;
        Policy_Schedule__c ps=ps0.clone(false,true,false,false);
        ps.Technical_UW_Premium__c=7000;
        ps.VG_Is_MTA__c = false;
        pslist.add(ps);               
        Policy_Schedule__c ps1=ps.clone(false,true,false,false);
        ps1.VG_Is_MTA__c=True;
        ps1.VG_MTA_Type__c = 'Revision of Cover';
        ps1.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps1.VG_MTA_Start_Date__c=Date.newInstance(2018, 10, 18);
        pslist.add(ps1);
        Policy_Schedule__c ps2=ps.clone(false,true,false,false);
        ps2.VG_Is_MTA__c=True;
        ps2.VG_MTA_Type__c = 'Extension';
        ps2.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps2.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps2);
        Policy_Schedule__c ps3=ps1.clone(false,true,false,false); 
        ps3.VG_Is_MTA__c=True;
        ps3.VG_MTA_Type__c = 'Extension';
        ps3.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps3.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps3);
        Insert pslist;        
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);
        rr.VG_Sum_Insured__c = 4870;
        update rr;       
        VG_Policy_Schedule_Asset__c rr1=VG_TU.createPolicyScheduleAsset(ps1.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        VG_Policy_Schedule_Endorsement__c pse2=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        pse2.VG_Type__c = 'Sub-limits';
        update pse2;
        //Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);        
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        ApexPages.currentPage().getParameters().put('PSID', ps0.id);        
        MTAStepsController mta=new MTAStepsController();             
        mta.gotostep1();
        mta.seletedType='Cancellation';   
        mta.gotostep2();
        mta.MTAcancellationDate = ps0.VG_MTA_Cancellation_Date__c;
        mta.calcJunction();
        mta.gotoStep4();        
        mta.finish();  
        mta.Cancel();
        Utilities.clearMethods();  
        Test.stopTest(); 
        
    }
    
    public static testMethod void TestMethodAffinity1() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Trigger Context2'); 
        Policy__c pol=VG_TU.createPolicy('Affinity',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2019, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 12, 18);
        update pol;
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id); 
        ps.VG_MTA_Type__c ='Revision of Cover';
        ps.VG_Is_MTA__c = true;
        ps.Technical_UW_Premium__c=7000;
        Ps.Premium_Adjustment__c=5000;
        ps.VG_Fee_Income__c=500;  
        ps.VG_MTA_Reduction_Date__c =Date.newInstance(2020, 5, 18);
        ps.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2019, 12, 19);
        ps.VG_MTA_Start_Date__c =Date.newInstance(2019, 12, 19);
        ps.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);     
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);   
        Test.startTest();
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        MTAStepsController mta=new MTAStepsController();        
        mta.gotostep1();
        mta.gotostep2();
        mta.seletedType='Reduction';
        mta.gotostep2();
        mta.seletedType='Extension';
        mta.seletedProrateoption = 'Flat';
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.calcJunction();
        mta.finish();  
        pol.VG_Expiry_Date__c = ps.VG_MTA_End_Date__c;
        update pol;  
        mta.Cancel();
        Utilities.clearMethods();
        Test.stopTest();
    }

    public static testMethod void TestMethodAffinity2() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Test.startTest();        
        Utilities.SkipMethods('Bridge Context'); 
        Utilities.SkipMethods('Trigger Context');
        Utilities.SkipMethods('Trigger Context2');
        Utilities.SkipMethods('FIDO_ROC_Revise_Context');
        Policy__c pol=VG_TU.createPolicy('Affinity',acc.id);       
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>(); 
        Policy_Schedule__c ps0=VG_TU.createPolicySchedule(pol.id); 
        ps0.VG_MTA_Cancellation_Date__c=Date.newInstance(2018, 2, 1);
        ps0.VG_MTA_Reduction_Date__c =Date.newInstance(2018, 2, 1);
        ps0.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);        
        ps0.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps0.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 18);
        pslist.add(ps0); 
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id); 
        ps.Technical_UW_Premium__c=7000;
        ps.VG_Is_MTA__c = false;
        pslist.add(ps);               
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id); 
        ps1.VG_Is_MTA__c=True;
        ps1.VG_MTA_Type__c = 'Revision of Cover';
        ps1.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps1.VG_MTA_Start_Date__c=Date.newInstance(2018, 10, 18);
        pslist.add(ps1);
        Policy_Schedule__c ps2=VG_TU.createPolicySchedule(pol.id); 
        ps2.VG_Is_MTA__c=True;
        ps2.VG_MTA_Type__c = 'Extension';
        ps2.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps2.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps2);
        Policy_Schedule__c ps3=VG_TU.createPolicySchedule(pol.id); 
        ps3.VG_Is_MTA__c=True;
        ps3.VG_MTA_Type__c = 'Extension';
        ps3.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps3.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps3);
        update pslist;        
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Asset__c rr1=VG_TU.createPolicyScheduleAsset(ps1.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        VG_Policy_Schedule_Endorsement__c pse2=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        pse2.VG_Type__c = 'Sub-limits';
        update pse2;
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        ApexPages.currentPage().getParameters().put('PSID', ps0.id);        
        MTAStepsController mta=new MTAStepsController();             
        mta.gotostep1();
        mta.seletedType='Cancellation';   
        mta.gotostep2();
        mta.MTAcancellationDate = ps0.VG_MTA_Cancellation_Date__c;
        mta.seletedProrateoption = 'Flat';
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.calcJunction();   
        mta.finish();  
        mta.Cancel();
        Utilities.clearMethods();
        Test.stopTest(); 
        
    }
    
    public static testMethod void TestMethodGentium1() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Trigger Context2');
        Policy__c pol=VG_TU.createPolicy('VIM',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);   
        ps.Technical_UW_Premium__c=7000;
        Ps.Premium_Adjustment__c=5000;
        ps.VG_Fee_Income__c=500;  
        //ps.VG_MTA_Cancellation_Date__c =Date.newInstance(2019, 5, 18);
        ps.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);
        ps.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);
        rr.VG_CH_Commission__c=1540;
        update rr;        
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);
		Test.startTest();      
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        MTAStepsController mta=new MTAStepsController();    
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        psw.CCAmount = 0;
        psw.CCPrecent = 0;
        PSW.TSI = 0;
        
        mta.gotostep1();
        mta.gotostep2();
        mta.seletedType='Extension';
        mta.seletedProrateoption = 'Flat';
        mta.gotostep2();
        mta.seletedProrateoption = 'Prorated';        
        mta.calcJunction();
        mta.finish();  
        pol.VG_Expiry_Date__c = ps.VG_MTA_End_Date__c;
        update pol;   
        mta.Cancel(); 
        Utilities.clearMethods();
        Test.stopTest();
    }
    
    public static testMethod void TestMethodGentium2() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('VIM',acc.id);
        pol.VG_Inception_Date__c=Date.newInstance(2017, 12, 18);
        pol.VG_Expiry_Date__c =Date.newInstance(2019, 1, 18);
        update pol;                
		Test.startTest();
		Utilities.SkipMethods('Bridge Context');       
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>(); 
        Policy_Schedule__c ps0=VG_TU.createPolicySchedule(pol.id); 
        ps0.VG_MTA_Cancellation_Date__c=Date.newInstance(2018, 12, 19);
        ps0.VG_MTA_Reduction_Date__c =Date.newInstance(2018, 2, 1);
        ps0.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);        
        ps0.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps0.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 18);
        update ps0;
        Policy_Schedule__c ps=ps0.clone(false,true,false,false);
        ps.Technical_UW_Premium__c=7000;
        ps.VG_Is_MTA__c = false;
        pslist.add(ps);               
        Policy_Schedule__c ps1=ps.clone(false,true,false,false);
        ps1.VG_Is_MTA__c=True;
        ps1.VG_MTA_Type__c = 'Revision of Cover';
        ps1.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps1.VG_MTA_Start_Date__c=Date.newInstance(2018, 10, 18);
        pslist.add(ps1);
        Policy_Schedule__c ps2=ps.clone(false,true,false,false);
        ps2.VG_Is_MTA__c=True;
        ps2.VG_MTA_Type__c = 'Extension';
        ps2.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps2.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps2);
        Policy_Schedule__c ps3=ps1.clone(false,true,false,false);
        ps3.VG_Is_MTA__c=True;
        ps3.VG_MTA_Type__c = 'Extension';
        ps3.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps3.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps3);
        Insert pslist;        
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        ApexPages.currentPage().getParameters().put('PSID', ps0.id);        
        MTAStepsController mta=new MTAStepsController();             
        mta.gotostep1();
        mta.seletedType='Reduction';   
        mta.gotostep2();
        mta.MTAcancellationDate = ps0.VG_MTA_Reduction_Date__c;
        mta.calcJunction();
        mta.UpdateAdjustmentvalues();        
        mta.gotoStep4();        
        mta.finish();  
        mta.Cancel();
        MTAStepsController mta1=new MTAStepsController();             
        mta1.gotostep1();
        mta1.seletedType='Cancellation';   
        mta1.gotostep2();
        mta1.MTAcancellationDate = ps0.VG_MTA_Cancellation_Date__c;
        mta1.UpdateAdjustmentvalues();                
        mta1.calcJunction();
        mta1.gotoStep4();        
        mta1.finish();
        Test.stopTest();         
    }
   
    public static testMethod void TestMethodAesir1() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');
        Utilities.SkipMethods('Trigger Context');
        Utilities.SkipMethods('Trigger Context2');
        Utilities.SkipMethods('FIDO_ROC_Revise_Context'); 
        Policy__c pol=VG_TU.createPolicy('Aesir',acc.id);
        Test.startTest();        
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id); 
        ps.VG_MTA_Type__c ='Revision of Cover';
        ps.VG_Is_MTA__c = true;
        ps.Technical_UW_Premium__c=7000;
        Ps.Premium_Adjustment__c=5000;
        ps.VG_Fee_Income__c=500;  
        ps.VG_MTA_Reduction_Date__c =Date.newInstance(2020, 5, 18);
        ps.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2019, 12, 19);
        ps.VG_MTA_Start_Date__c =Date.newInstance(2019, 12, 19);
        ps.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);    
        rr.Annual_Rate_100__c = 4800;
        update rr;
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);   
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        MTAStepsController mta=new MTAStepsController();        
        mta.gotostep1();
        mta.gotostep2();
        mta.seletedType='Reduction';
        mta.gotostep2();
        mta.seletedType='Extension';
        mta.seletedProrateoption = 'Flat';
        mta.UpdateAdjustmentvalues();
        mta.calcJunction();
        mta.seletedProrateoption = 'Prorated';
        mta.UpdateAdjustmentvalues();
        mta.calcJunction();
        mta.finish();  
        pol.VG_Expiry_Date__c = ps.VG_MTA_End_Date__c;
        update pol;  
        mta.Cancel();
        Utilities.clearMethods();
        Test.stopTest();
    }

    public static testMethod void TestMethodAesir2() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');
        Policy__c pol=VG_TU.createPolicy('Aesir',acc.id);
        Test.startTest();
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>(); 
        Policy_Schedule__c ps0=VG_TU.createPolicySchedule(pol.id); 
        ps0.VG_MTA_Cancellation_Date__c=Date.newInstance(2018, 2, 1);
        ps0.VG_MTA_Reduction_Date__c =Date.newInstance(2018, 2, 1);
        ps0.VG_Pre_MTA_Expiry_Date__c=Date.newInstance(2018, 12, 19);        
        ps0.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps0.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 18);
        ps0.Gross_or_Net_Premium__c = 'Net';
        ps0.Net_Premium__c =45;
        ps0.Share__c = 12;
        update ps0; 
        Policy_Schedule__c ps=ps0.clone(false,true,false,false); 
        ps.Technical_UW_Premium__c=7000;
        ps.VG_Is_MTA__c = false;
        pslist.add(ps);               
        Policy_Schedule__c ps1=ps.clone(false,true,false,false); 
        ps1.VG_Is_MTA__c=True;
        ps1.VG_MTA_Type__c = 'Revision of Cover';
        ps1.VG_MTA_End_Date__c=Date.newInstance(2019, 12, 18);
        ps1.VG_MTA_Start_Date__c=Date.newInstance(2018, 10, 18);
        pslist.add(ps1);
        Policy_Schedule__c ps2=ps.clone(false,true,false,false); 
        ps2.VG_Is_MTA__c=True;
        ps2.VG_MTA_Type__c = 'Extension';
        ps2.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps2.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps2);
        Policy_Schedule__c ps3=ps1.clone(false,true,false,false); 
        ps3.VG_Is_MTA__c=True;
        ps3.VG_MTA_Type__c = 'Extension';
        ps3.VG_MTA_End_Date__c=Date.newInstance(2020, 12, 18);
        ps3.VG_MTA_Start_Date__c=Date.newInstance(2019, 12, 19);
        pslist.add(ps3);
        Insert pslist;        
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Asset__c rr1=VG_TU.createPolicyScheduleAsset(ps1.id);
        rr.Annual_Rate_100__c = 4800;
        update rr;
        rr1.Annual_Rate_100__c = 4800;
        update rr1;
        ApexPages.currentPage().getParameters().put('PId', pol.id);
        ApexPages.currentPage().getParameters().put('PSID', ps0.id);         
        MTAStepsController mta=new MTAStepsController();  
        mta.gotostep1();
        mta.seletedType='Cancellation';   
        mta.gotostep2();
        mta.MTAcancellationDate = ps0.VG_MTA_Cancellation_Date__c;
        mta.calcJunction();
        mta.finish();  
        mta.Cancel();
        Utilities.clearMethods();
        Test.stopTest(); 
        
    }
    
    public static testMethod void TestMethodBridgeROC() {
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Bridge',acc.id);
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        ps.Technical_UW_Premium__c=5000;
        Ps.Levies__c =450;
        update ps;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id);       
        Endorsement_Library__c EL1=VG_TU.createEndorsementLibraryCustom('Bridge','Sub-limits');        
        Endorsement_Library__c EL2=VG_TU.createEndorsementLibraryCustom('Bridge','Endorsements');       
        Endorsement_Library__c EL=VG_TU.createEndorsementLibrary();
        EL.RecordTypeId=Schema.SObjectType.Endorsement_Library__c.getRecordTypeInfosByName().get('Bridge').getRecordTypeId();
        EL.VG_Product__c='Property';        
        update EL;
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        ApexPages.currentPage().getParameters().put('PSID', ps.id);
        ApexPages.currentPage().getParameters().put('RecordType', 'Bridge');
        MTAStepsController.PSWrapper psw = new MTAStepsController.PSWrapper();
        MTAStepsController mta=new MTAStepsController();
        mta.gotostep1();
        mta.seletedType ='Revision of cover'; 
        mta.seletedProrateoption = 'Flat';
        mta.gotostep2();
        mta.seletedProrateoption = 'Prorated'; 
        mta.gotoStep4();          
        System.debug('ps.VG_MTA_End_Date__c::'+ps.VG_MTA_End_Date__c);
        ps.VG_MTA_Start_Date__c=Date.newInstance(2018, 12, 19);
        update ps;
        System.debug('ps.VG_MTA_End_Date__c::'+ps.VG_MTA_End_Date__c);
        mta.gotoStep4(); 
        mta.Cancel();
    }    */  
}